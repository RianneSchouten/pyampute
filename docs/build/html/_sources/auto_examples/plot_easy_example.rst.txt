
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_easy_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_easy_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_easy_example.py:


===============
A quick example
===============

Amputation is the opposite of imputation: the generation of missing values in complete datasets. That is useful in an experimental setting where you want to evaluate the effect of missing values on the outcome of a model. 

:class:`~pyampute.ampute.MultivariateAmputation` is designed following scikit-learn's ``fit`` and ``transform`` paradigm, and can therefore seamless be integrated in a larger data processing pipeline.

Here, we give a short demonstration. A more extensive example can be found in `this example`_. For people who are familiar with the implementation of multivariate amputation in R-function `ampute`_, `this blogpost`_ gives an overview of the similarities and differences with :class:`~pyampute.ampute.MultivariateAmputation`. Inspection of an incomplete dataset can be done with :class:`~pyampute.exploration.md_patterns.mdPatterns`.

Note that the amputation methodology itself is proposed in `Generating missing values for simulation purposes`_ and in `The dance of the mechanisms`_.

.. _`sklearn`: https://scikit-learn.org/stable/index.html
.. _`TransformerMixin`: https://scikit-learn.org/stable/modules/generated/sklearn.base.TransformerMixin.html#sklearn.base.TransformerMixin
.. _`pipeline`: https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html
.. _`this example`: https://rianneschouten.github.io/pyampute/build/html/auto_examples/plot_simulation_pipeline.html
.. _`ampute`: https://rianneschouten.github.io/mice_ampute/vignette/ampute.html
.. _`this blogpost`: https://rianneschouten.github.io/pyampute/build/html/mapping.html
.. _`Generating missing values for simulation purposes`: https://www.tandfonline.com/doi/full/10.1080/00949655.2018.1491577
.. _`The Dance of the Mechanisms`: https://journals.sagepub.com/doi/full/10.1177/0049124118799376

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    # Author: Rianne Schouten <https://rianneschouten.github.io/>
    # Co-Author: Davina Zamanzadeh <https://davinaz.me/>








.. GENERATED FROM PYTHON SOURCE LINES 28-33

Transforming one dataset
#########################

 Multivariate amputation of one dataset can directly be performed with ``fit_transform``. Inspection of an incomplete dataset can be done with :class:`~pyampute.exploration.md_patterns.mdPatterns`. By default, :class:`~pyampute.ampute.MultivariateAmputation` generates 1 pattern with MAR missingness in 50% of the data rows for 50% of the variables.


.. GENERATED FROM PYTHON SOURCE LINES 33-52

.. code-block:: default


    import numpy as np

    from pyampute.ampute import MultivariateAmputation
    from pyampute.exploration.md_patterns import mdPatterns

    seed = 2022
    rng = np.random.default_rng(seed)

    m = 1000
    n = 10
    X_compl = rng.standard_normal((m, n))

    ma = MultivariateAmputation(seed=seed)
    X_incompl = ma.fit_transform(X_compl)

    mdp = mdPatterns()
    patterns = mdp.get_patterns(X_incompl)




.. image-sg:: /auto_examples/images/sphx_glr_plot_easy_example_001.png
   :alt: plot easy example
   :srcset: /auto_examples/images/sphx_glr_plot_easy_example_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/dav/research/pyampute/pyampute/exploration/md_patterns.py:120: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      group_values = group_values.append(colsums, ignore_index=True)




.. GENERATED FROM PYTHON SOURCE LINES 53-58

A separate fit and transform
#############################

 Integration in a larger pipeline requires separate ``fit`` and ``transform`` functionality.


.. GENERATED FROM PYTHON SOURCE LINES 58-66

.. code-block:: default


    from sklearn.model_selection import train_test_split

    X_compl_train, X_compl_test = train_test_split(X_compl, random_state=2022)
    ma = MultivariateAmputation()
    ma.fit(X_compl_train)
    X_incompl_test = ma.transform(X_compl_test)








.. GENERATED FROM PYTHON SOURCE LINES 67-76

Integration in a pipeline
##########################

 A short pipeline may look as follows.

 .. _`sklearn`: https://scikit-learn.org/stable/index.html
 .. _`TransformerMixin`: https://scikit-learn.org/stable/modules/generated/sklearn.base.TransformerMixin.html#sklearn.base.TransformerMixin
 .. _`pipeline`: https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html


.. GENERATED FROM PYTHON SOURCE LINES 76-86

.. code-block:: default


    from sklearn.pipeline import make_pipeline
    from sklearn.impute import SimpleImputer
    import matplotlib.pyplot as plt

    pipe = make_pipeline(MultivariateAmputation(), SimpleImputer())
    pipe.fit(X_compl_train)

    X_imp_test = pipe.transform(X_compl_test)








.. GENERATED FROM PYTHON SOURCE LINES 87-88

By default, ``SimpleImputer`` imputes with the mean of the observed data. It is therefore like that we find the median in 50% of the rows (of the test set, which contains 25% of :math:`m`) for 50% of the variables.

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: default


    medians = np.nanmedian(X_imp_test, axis=0)
    print(np.sum(X_imp_test == medians[None, :], axis=0))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [  0   0 120 120 120   0 120 120   0   0]




.. GENERATED FROM PYTHON SOURCE LINES 93-97

For more information about ``pyampute``'s parameters, see `A mapping from R-function ampute to pyampute`_. To learn how to design a more thorough experiment, see `Evaluating missing values with grid search and a pipeline`_.

.. _`A mapping from R-function ampute to pyampute`: https://rianneschouten.github.io/pyampute/build/html/mapping.html
.. _`Evaluating missing values with grid search and a pipeline`: https://rianneschouten.github.io/pyampute/build/html/auto_examples/plot_simulation_pipeline.html


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.226 seconds)


.. _sphx_glr_download_auto_examples_plot_easy_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_easy_example.py <plot_easy_example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_easy_example.ipynb <plot_easy_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
