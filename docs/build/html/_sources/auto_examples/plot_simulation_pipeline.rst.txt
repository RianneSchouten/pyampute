
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_simulation_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_simulation_pipeline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_simulation_pipeline.py:


===================
Simulation Pipeline
===================

Multivariate amputation can be used to evaluate the effect of missing values on the outcome of an analysis or experiment. In general, such an experiment is designed as follows:

1. Generate or import a complete dataset
2. Ampute the dataset
3. Impute the dataset
4. Compare the performance of a model between the dataset in step 1, 2 and 3. 

We will demonstrate how that works. 

.. GENERATED FROM PYTHON SOURCE LINES 17-26

Author: Rianne Schouten <r.m.schouten@tue.nl>

A complete dataset
------------------

A complete dataset can synthetically be designed. In that case, be aware to create a correlation structure between features, since correlation ensures that the missing values differ from the observed values, which again results in a change of performance of your model (see [1]_). Furthermore, a correlation structure is needed for many useful imputation methods. 

Another option is to work with a complete portion of an already incomplete dataset.


.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: default


    import numpy as np

    m = 1000
    n = 10
    compl_dataset = np.random.randn(n, m)








.. GENERATED FROM PYTHON SOURCE LINES 34-38

Multivariate Amputation
-----------------------

With our multivariate amputation methodology, it is straightforward to generate all sorts of missing data problems. We advise to evaluate the performance of your model for different settings of the algorithm. For instance, compare MCAR, MAR and MNAR missingness, or compare different missingness proportions. An explanation of the input arguments can be found in the [documentation]_ and a more thorough explanation in [this blogpost]_. 

.. GENERATED FROM PYTHON SOURCE LINES 38-50

.. code-block:: default


    # The default settings generate 1 patterns with MAR missingness for 50% of the rows. The incomplete dataset can be explored using the mdPatterns class. 

    from pyampute.ampute import MultivariateAmputation
    from pyampute.exploration.md_patterns import mdPatterns

    ma = MultivariateAmputation()
    incompl_data = ma.fit_transform(compl_dataset)

    mdp = mdPatterns()
    patterns = mdp._get_patterns(incompl_data)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\Users\20200059\Documents\Github\pyampute\examples\plot_simulation_pipeline.py", line 48, in <module>
        patterns = mdp._get_patterns(incompl_data)
    AttributeError: 'mdPatterns' object has no attribute '_get_patterns'




.. GENERATED FROM PYTHON SOURCE LINES 51-55

Imputation
----------

Imputation can easily be done using existing methods. Because we make use of sklearn's TransformerMixin, it is easy to combine amputation and imputation in one pipeline. 

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    # here some code that shows pipeline


.. GENERATED FROM PYTHON SOURCE LINES 59-63

Evaluation
----------

As an example, here we demonstrate how you can evaluate the effect of missing values on estimating the mean of a variable.

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default


    # here some code that compares the mean under 1, 2 and 3, and shows differences for MCAR and MAR, and differences for SimpleImputer and IterativeImputer.


.. GENERATED FROM PYTHON SOURCE LINES 67-73

References
----------

.. [1] `Generating missing values ...
       <https://www.tandfonline.com/doi/full/10.1080/00949655.2018.1491577>`_,
       Rianne M. Schouten, Peter Lugtig & Gerko Vink, etc.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.020 seconds)


.. _sphx_glr_download_auto_examples_plot_simulation_pipeline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_simulation_pipeline.py <plot_simulation_pipeline.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_simulation_pipeline.ipynb <plot_simulation_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
